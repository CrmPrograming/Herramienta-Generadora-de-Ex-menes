/* parser generated by jison 0.4.2 */
var generador_examen = (function() {
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: {
            "error": 2,
            "S": 3,
            "TITULO": 4,
            "DESCRIPCION": 5,
            "CONTENIDO": 6,
            "TAG_TITLE": 7,
            "TEXT": 8,
            "TAG_DESCP": 9,
            "VERDADEROFALSO": 10,
            "TAG_TRUEFALSE": 11,
            "RESPUESTAS": 12,
            "TAG_RIGHT": 13,
            "TAG_WRONG": 14,
            "$accept": 0,
            "$end": 1
        },
        terminals_: {
            2: "error",
            7: "TAG_TITLE",
            8: "TEXT",
            9: "TAG_DESCP",
            11: "TAG_TRUEFALSE",
            13: "TAG_RIGHT",
            14: "TAG_WRONG"
        },
        productions_: [0, [3, 3],
            [4, 2],
            [5, 2],
            [6, 2],
            [6, 0],
            [10, 3],
            [12, 3],
            [12, 3],
            [12, 0]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:

                    var aux = CABECERA_FORMULARIO;
                    aux += "&lt;form name='examen' action='&lt;?php $_SERVER[#PHP_SELF#]; ?&gt;' method='post'&gt;";
                    aux = aux.replace(/'/g, "\"");
                    aux = aux.replace(/\#/g, "'");
                    aux += NEXT_LINE;
                    return $$[$0 - 2] + $$[$0 - 1] + aux + $$[$0] + END_WEB;


                    break;
                case 2:
                    this.$ = (MENOR + "title" + MAYOR + $$[$0].replace(/\"/g, "") + MENOR + "/title" + MAYOR + NEXT_LINE);
                    break;
                case 3:
                    this.$ = $$[$0].replace(/\"/g, "") + NEXT_LINE;
                    break;
                case 4:
                    this.$ = ($$[$0 - 1] + $$[$0]);
                    break;
                case 5:
                    this.$ = "";
                    break;
                case 6:
                    this.$ = (P + $$[$0 - 1].replace(/\"/g, "") + END_P + NEXT_LINE + $$[$0] + NEXT_LINE);
                    contadorPreguntas++;
                    break;
                case 7:
                    this.$ = INPUT + contadorPreguntas + "' " + "value='" + TRUE + "'/" + MAYOR + $$[$0 - 1].replace(/\"/g, "") + NEXT_LINE + $$[$0];
                    break;
                case 8:
                    this.$ = INPUT + contadorPreguntas + "' " + "value='" + FALSE + "'/" + MAYOR + $$[$0 - 1].replace(/\"/g, "") + NEXT_LINE + $$[$0];
                    break;
                case 9:
                    this.$ = "";
                    break;
            }
        },
        table: [{
                3: 1,
                4: 2,
                7: [1, 3]
            }, {
                1: [3]
            }, {
                5: 4,
                9: [1, 5]
            }, {
                8: [1, 6]
            }, {
                1: [2, 5],
                6: 7,
                10: 8,
                11: [1, 9]
            }, {
                8: [1, 10]
            }, {
                9: [2, 2]
            }, {
                1: [2, 1]
            }, {
                1: [2, 5],
                6: 11,
                10: 8,
                11: [1, 9]
            }, {
                8: [1, 12]
            }, {
                1: [2, 3],
                11: [2, 3]
            }, {
                1: [2, 4]
            }, {
                1: [2, 9],
                11: [2, 9],
                12: 13,
                13: [1, 14],
                14: [1, 15]
            }, {
                1: [2, 6],
                11: [2, 6]
            }, {
                8: [1, 16]
            }, {
                8: [1, 17]
            }, {
                1: [2, 9],
                11: [2, 9],
                12: 18,
                13: [1, 14],
                14: [1, 15]
            }, {
                1: [2, 9],
                11: [2, 9],
                12: 19,
                13: [1, 14],
                14: [1, 15]
            }, {
                1: [2, 7],
                11: [2, 7]
            }, {
                1: [2, 8],
                11: [2, 8]
            }
        ],
        defaultActions: {
            6: [2, 2],
            7: [2, 1],
            11: [2, 4]
        },
        parseError: function parseError(str, hash) {
            throw new Error(str);
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined")
                this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function")
                this.parseError = this.yy.parseError;

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == "undefined") {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === "undefined" || !action.length || !action[0]) {
                    var errStr = "";
                    if (!recovering) {
                        expected = [];
                        for (p in table[state])
                            if (this.terminals_[p] && p > 2) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        if (this.lexer.showPosition) {
                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                        }
                        this.parseError(errStr, {
                            text: this.lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: this.lexer.yylineno,
                            loc: yyloc,
                            expected: expected
                        });
                    }
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0)
                                recovering--;
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if (typeof r !== "undefined") {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };


    var MENOR = "&lt;";
    var MAYOR = "&gt;";
    var NEXT_LINE = "\n";
    var CABECERA_FORMULARIO = "&lt;! -- Formulario --&gt;" + NEXT_LINE + "&lt;h3&gt;PREGUNTAS&lt;/h3&gt;" + NEXT_LINE;
    var P = MENOR + "p" + MAYOR;
    var END_P = MENOR + "/p" + MAYOR;
    var INPUT = MENOR + "input type='radio' name='respuesta_";
    var contadorPreguntas = 1;
    var TRUE = "true";
    var FALSE = "false";
    var END_WEB = "&lt;p&gt;&lt;input type='submit' name='evaluar' value='Evaluar' /&gt;&lt;/p&gt;" + NEXT_LINE + "&lt;/form&gt;" + NEXT_LINE + "&lt;/body&gt;" + NEXT_LINE + "&lt;/html&gt;"; /* generated by jison-lex 0.1.0 */
    var lexer = (function() {
        var lexer = {
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },
            setInput: function(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
            },
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
            },
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
            },
            more: function() {
                this._more = true;
                return this;
            },
            less: function(n) {
                this.unput(this.match.slice(n));
            },
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;

                var token,
                    match,
                    tempMatch,
                    index,
                    col,
                    lines;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (!this.options.flex) break;
                    }
                }
                if (match) {
                    lines = match[0].match(/(?:\r\n?|\n).*/g);
                    if (lines) this.yylineno += lines.length;
                    this.yylloc = {
                        first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                    };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
                    }
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (token) return token;
                    else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            lex: function lex() {
                var r = this.next();
                if (typeof r !== 'undefined') {
                    return r;
                } else {
                    return this.lex();
                }
            },
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            popState: function popState() {
                return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
                this.begin(condition);
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* ignoramos espacios en blanco */
                            break;
                    case 1:
                        return 7;
                        break;
                    case 2:
                        return 9;
                        break;
                    case 3:
                        return 11;
                        break;
                    case 4:
                        return 14;
                        break;
                    case 5:
                        return 13;
                        break;
                    case 6:
                        return 8;
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:##Title\b)/, /^(?:##Descp\b)/, /^(?:##TrueFalse\b)/, /^(?:#!)/, /^(?:#=)/, /^(?:"(\\.|[^"])*?")/],
            conditions: {
                "INITIAL": {
                    "rules": [0, 1, 2, 3, 4, 5, 6],
                    "inclusive": true
                }
            }
        };
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = generador_examen;
    exports.Parser = generador_examen.Parser;
    exports.parse = function() {
        return generador_examen.parse.apply(generador_examen, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
